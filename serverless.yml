service: s3-crud-api-file

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-1
  apiName: ${self:service}
  memorySize: 128 # mb
  timeout: 10 # seconds
  environment:
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileBucketName}

plugins:
  - serverless-iam-roles-per-function

custom:
  fileBucketName: s3-crud-api-file-bucket-${self:provider.stage}

functions:
  s3CrudApiFileUpload:
    handler: src/upload.handler
    name: s3-crud-api-file-upload
    description: A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: file
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource: arn:aws:s3:::${self:custom.fileBucketName}/*
  s3CrudApiFileGet:
    handler: src/get.handler
    name: s3-crud-api-file-get
    description: A lambda handler that retrieves a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: file/{fileKey}
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Get*"
        Resource: arn:aws:s3:::${self:custom.fileBucketName}/*
  s3CrudApiFileDelete:
    handler: src/delete.handler
    name: s3-crud-api-file-delete
    description: A lambda handler that deletes a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: file/{fileKey}
          method: DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:DeleteObject"
        Resource: arn:aws:s3:::${self:custom.fileBucketName}/*

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileBucketName}
        AccessControl: Private


# service: s3-crud-api-file-gateway

# provider:
#   name: aws
#   runtime: nodejs12.x
#   stage: dev
#   region: ap-south-1
#   apiName: ${self:service}
#   memorySize: 128 # mb
#   timeout: 10 # seconds
#   environment:
#     FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileBucketName}

#   custom:
#     fileBucketName: s3-crud-api-file-bucket-${self:provider.stage}

#   resources:
#     Resources:
#       FileBucket:
#         Type: AWS::S3::Bucket
#         Properties:
#           BucketName: ${self:custom.fileBucketName}
#           AccessControl: Private

# # you can add statements to the Lambda function's IAM Role here
# #  iam:
# #    role:
# #      statements:
# #        - Effect: "Allow"
# #          Action:
# #            - "s3:ListBucket"
# #          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
# #        - Effect: "Allow"
# #          Action:
# #            - "s3:PutObject"
# #          Resource:
# #            Fn::Join:
# #              - ""
# #              - - "arn:aws:s3:::"
# #                - "Ref" : "ServerlessDeploymentBucket"
# #                - "/*"

# # you can define service wide environment variables here
# #  environment:
# #    variable1: value1

# # you can add packaging information here
# #package:
# #  patterns:
# #    - '!exclude-me.js'
# #    - '!exclude-me-dir/**'
# #    - include-me.js
# #    - include-me-dir/**

# functions:
#   s3CrudApiFileUpload:
#     handler: src/upload.handler
#     name: s3-crud-api-file-upload 
#     events:
#       - httpApi:
#           path: file
#           method: POST
#     iam:
#       role:
#         statements:
#           - Effect: "Allow"
#             Action:
#               - "s3:Put*"
#             # Resource: arn:aws:s3:::${self:custom.fileBucketName}/*
#             Resource:
#               Fn::Join:
#                 - ""
#                 - - "arn:aws:s3:::"
#                   - "Ref" : "fileBucketName"
#                   - "/*"
#   s3CrudApiFileGet:
#     handler: src/get.handler
#     name: s3-crud-api-file-get 
#     events:
#       - httpApi:
#           path: file/{fileKey}
#           method: GET
#     iam:
#       role:
#         statements:
#           - Effect: "Allow"
#             Action:
#               - "s3:Get*"
#             Resource:
#               Fn::Join:
#                 - ""
#                 - - "arn:aws:s3:::"
#                   - "Ref" : "fileBucketName"
#                   - "/*"
#   s3CrudApiFileDelete:
#     handler: src/delete.handler
#     name: s3-crud-api-file-delete 
#     events:
#       - httpApi:
#           path: file/{fileKey}
#           method: DELETE
#     iam:
#       role:
#         statements:
#           - Effect: "Allow"
#             Action:
#               - "s3:DeleteObject"
#             # Resource: arn:aws:s3:::${self:custom.fileBucketName}/*
#             Resource:
#               Fn::Join:
#                 - ""
#                 - - "arn:aws:s3:::"
#                   - "Ref" : "fileBucketName"
#                   - "/*"



# #      - websocket: $connect
# #      - s3: ${env:BUCKET}
# #      - schedule: rate(10 minutes)
# #      - sns: greeter-topic
# #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
# #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
# #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
# #      - iot:
# #          sql: "SELECT * FROM 'some_topic'"
# #      - cloudwatchEvent:
# #          event:
# #            source:
# #              - "aws.ec2"
# #            detail-type:
# #              - "EC2 Instance State-change Notification"
# #            detail:
# #              state:
# #                - pending
# #      - cloudwatchLog: '/aws/lambda/hello'
# #      - cognitoUserPool:
# #          pool: MyUserPool
# #          trigger: PreSignUp
# #      - alb:
# #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
# #          priority: 1
# #          conditions:
# #            host: example.com
# #            path: /hello

# #    Define function environment variables here
# #    environment:
# #      variable2: value2

# # you can add CloudFormation resource templates here
# #resources:
# #  Resources:
# #    NewResource:
# #      Type: AWS::S3::Bucket
# #      Properties:
# #        BucketName: my-new-bucket
# #  Outputs:
# #     NewOutput:
# #       Description: "Description for the output"
# #       Value: "Some output value"
